{"version":3,"sources":["common/Input.js","cmps/TodoPreview.js","cmps/todosHooks.js","cmps/Todos.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Input","onKeyUp","placeholder","Container","styled","input","TodoPreview","todo","onToggleChecked","onRemoveTodo","toggleChecked","useCallback","isChecked","removeTodo","TodoItem","Text","onClick","content","Remove","li","span","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","useTodos","useState","id","state","setState","useEffect","database","ref","on","snapshot","val","off","data","set","Todos","todos","setTodos","handleKeyUp","ev","which","Date","now","target","value","updateTodos","map","to","filter","todosList","key","className","style","overflow","height","div","Home","Title","h1","button","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cabd792.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Input = ({ onKeyUp, placeholder }) => (<Container onKeyUp={onKeyUp} placeholder={placeholder} />);\n\nexport default Input;\n\nconst Container = styled.input`\n  width: 100%;\n  border: 1px solid #979797;\n  padding: 0.6rem 0 0.6rem 1rem;\n  font-size: 1.4rem;\n  border: none;\n`;\n","import React from 'react';\r\nimport { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nfunction TodoPreview({ todo, onToggleChecked, onRemoveTodo }) {\r\n\r\n  const toggleChecked = useCallback(() => {\r\n    onToggleChecked({ ...todo, isChecked: !todo.isChecked });\r\n  }, [onToggleChecked, todo])\r\n\r\n  const removeTodo = useCallback(() => {\r\n    onRemoveTodo(todo);\r\n  }, [onRemoveTodo, todo])\r\n\r\n  return (\r\n    <TodoItem >\r\n      <Text isChecked={todo.isChecked} onClick={toggleChecked}>{todo.content}</Text>\r\n      <Remove onClick={removeTodo}>X</Remove>\r\n    </TodoItem>\r\n  );\r\n\r\n}\r\n\r\nexport default TodoPreview;\r\n\r\nconst TodoItem = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: #00008a;\r\n  margin: 0;\r\n  padding: 0.5rem;\r\n  text-align: left;\r\n  background-color: #d4c0a9;\r\n  border-top: 1px solid #00008a;\r\n  `;\r\n\r\nconst Text = styled.span`\r\n  ${({ isChecked }) => isChecked && `text-decoration: line-through`};\r\n`;\r\n\r\nconst Remove = styled.span`\r\n  padding: 4px;\r\n  min-width: 25px;\r\n  margin: 0 0 0 12px;\r\n`;","import { useState, useEffect, useCallback } from 'react';\r\n// import firebase from 'firebase';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBiV7umKtuBstXNpkISNCoDyt7u213k28I\",\r\n  authDomain: \"omer-todos-firebase.firebaseapp.com\",\r\n  databaseURL: \"https://omer-todos-firebase.firebaseio.com\",\r\n  projectId: \"omer-todos-firebase\",\r\n  storageBucket: \"omer-todos-firebase.appspot.com\",\r\n  messagingSenderId: \"212360300149\",\r\n  appId: \"1:212360300149:web:8c4ec84c04fa735c395a3c\",\r\n  measurementId: \"G-3ZBDBVE5Q1\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst TODOS_URL = '/todos2';\r\n\r\nexport const useTodos = () => {\r\n  const [state, setState] = useState([{ id: '1', content: 'Loading . . .', isChecked: false }]);\r\n\r\n  useEffect(() => {\r\n    firebase.database().ref(TODOS_URL).on('value', snapshot => {\r\n      setState(snapshot.val());\r\n    });\r\n\r\n    return () => firebase.database().ref(TODOS_URL).off();\r\n  }, []);\r\n\r\n  const syncTasks = useCallback(data => {\r\n    firebase.database().ref(TODOS_URL).set(data);\r\n  }, []);\r\n\r\n  return [state, syncTasks];\r\n};\r\n","import React from 'react';\r\nimport { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Input from '../common/Input';\r\nimport TodoPreview from './TodoPreview';\r\n\r\nimport { useTodos } from './todosHooks';\r\n// import { useState } from 'react';\r\n\r\nfunction Todos() {\r\n\r\n  const [todos, setTodos] = useTodos();\r\n\r\n  // const [todos, setTodos] = useState([\r\n  //   { id: '1', content: 'buy gift for my girl', isChecked: false },\r\n  //   { id: '2', content: 'lalala', isChecked: false }\r\n  // ]);\r\n\r\n  const handleKeyUp = useCallback(ev => {\r\n    if (ev.which !== 13) return;\r\n    setTodos([...todos, { id: Date.now(), content: ev.target.value, isChecked: false }]);\r\n    ev.target.value = '';\r\n  }, [setTodos, todos]);\r\n\r\n  const toggleChecked = useCallback(todo => {\r\n    const updateTodos = todos.map(to => to.id === todo.id ? todo : to);\r\n    setTodos(updateTodos);\r\n  }, [setTodos, todos]);\r\n\r\n  const removeTodo = useCallback(todo => {\r\n    const updateTodos = todos.filter(to => to.id !== todo.id);\r\n    setTodos(updateTodos);\r\n  }, [setTodos, todos]);\r\n\r\n  const todosList = todos.map(todo => {\r\n    return <TodoPreview key={todo.id} todo={todo}\r\n      onToggleChecked={toggleChecked} onRemoveTodo={removeTodo} />\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <Input onKeyUp={handleKeyUp} placeholder={'Add New Todo . .'} />\r\n      <ul className=\"clean-list\" style={{ overflow: 'auto', height: '100%' }} >\r\n        {todosList}\r\n      </ul>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Todos;\r\n\r\nconst Container = styled.div`\r\n  height: 80vh;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 50%;\r\n  margin: 2rem auto 0 auto;\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Todos from '../cmps/Todos';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"Home\">\r\n      <Title>Todos with 'styled-components' & Firebase!</Title>\r\n      {/* <Button>My first button in styled component</Button> */}\r\n      <Todos />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: #002579;\r\n  margin: 0;\r\n  padding: 1rem 0;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  cursor: pointer;\r\n  background: transparent;\r\n  font-size: 16px;\r\n  border-radius: 3px;\r\n  color: #002579;\r\n  border: 2px solid #002579;\r\n  margin: 0 1em;\r\n  padding: 0.25em 1em;\r\n  transition: 0.3s all ease-out;\r\n  &:hover {\r\n    background-color: #002579;\r\n    color: #ddd;\r\n  }\r\n`;","import React from 'react';\nimport './assets/css/App.scss';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}